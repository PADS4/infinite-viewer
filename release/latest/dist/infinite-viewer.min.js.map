{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/InfiniteViewer.tsx","../src/index.umd.ts"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\n\nexport const injector = styled(`\n{\n    position: relative;\n    display: block;\n    overflow: auto;\n}\n:host::-webkit-scrollbar {\n    display: none;\n}\n`);\n\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    \"margin\",\n    \"threshold\",\n    \"zoom\",\n    \"scrollArea\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoom\",\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof InfiniteViewerOptions]: any } = {\n    margin: Number,\n    threshold: Number,\n    zoom: Number,\n    scrollArea: Object,\n};\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"scrollTo\",\n    \"scrollBy\",\n] as const;\n","import { OnDrag } from \"@daybrush/drag\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        speed[0] / 2 * duration,\n        speed[1] / 2 * duration,\n    ];\n}\n","import Component from \"@egjs/component\";\nimport Dragger from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport {  camelize, IObject, addEvent, removeEvent, addClass } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos } from \"./utils\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass InfiniteViewer extends Component {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private scrollArea!: HTMLElement;\n    private dragger!: Dragger;\n    private loopX = 0;\n    private loopY = 0;\n    private offsetX = 0;\n    private offsetY = 0;\n    private scrollLeft = 0;\n    private scrollTop = 0;\n    private timer = 0;\n    /**\n     *\n     */\n    constructor(\n        private container: HTMLElement,\n        private viewport: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            margin: 500,\n            threshold: 100,\n            zoom: 1,\n            scrollArea: null,\n            ...options,\n        };\n        this.scrollArea = this.options.scrollArea;\n        this.init();\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(this.container, \"scroll\", this.onScroll);\n\n        this.dragger = null;\n        this.injectResult = null;\n        this.container = null;\n        this.options = null;\n    }\n    public getScrollTop() {\n        return this.scrollTop + (this.loopY - 1) * this.margin - this.offsetY;\n    }\n    public getScrollLeft() {\n        return this.scrollLeft + (this.loopX - 1) * this.margin - this.offsetX;\n    }\n    public scrollBy(deltaX: number, deltaY: number) {\n\n        this.scrollTo(this.getScrollLeft() + deltaX, this.getScrollTop() + deltaY);\n    }\n    public scrollTo(scrollLeft: number, scrollTop: number) {\n        const margin = this.margin;\n\n        this.loopX = Math.floor((margin + scrollLeft) / margin);\n        this.loopY = Math.floor((margin + scrollTop) / margin);\n        this.offsetX = (this.loopX - 1) * margin - scrollLeft + this.scrollLeft;\n        this.offsetY = (this.loopY - 1) * margin - scrollTop + this.scrollTop;\n\n        this.render();\n        this.trigger(\"scroll\");\n    }\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const container = this.container;\n\n        addClass(container, CLASS_NAME);\n\n        // vanilla\n        if (!this.scrollArea) {\n            this.scrollArea = document.createElement(\"div\");\n\n            const scrollArea = this.scrollArea;\n\n            scrollArea.style.cssText = `position:absolute;top:0;left:0;width:calc(100% + 400px);height:calc(100% + 400px);`;\n            container.insertBefore(scrollArea, container.firstChild);\n        }\n\n        this.injectResult = injector.inject(container);\n\n        this.dragger = new Dragger(container, {\n            container: document.body,\n            events: [\"touch\"],\n            dragstart: ({ inputEvent }) => {\n                inputEvent.preventDefault();\n                this.pauseAnimation();\n            },\n            drag: e => {\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX, -e.deltaY);\n            },\n            dragend: e => {\n                this.startAnimation(e.datas.speed);\n            },\n        });\n        const margin = this.margin;\n\n        addEvent(container, \"scroll\", this.onScroll);\n        this.render();\n        this.move(margin, margin);\n    }\n    private render() {\n        const {\n            margin,\n            loopX,\n            loopY,\n            offsetX,\n            offsetY,\n            zoom,\n        } = this;\n        const size = `calc(100% + ${margin * 2}px)`;\n        const nextOffsetX = (1 - loopX) * margin + offsetX;\n        const nextOffsetY = (1 - loopY) * margin + offsetY;\n\n        this.scrollArea.style.cssText += `width:${size};height:${size};`;\n        this.viewport.style.transform = `translate(${nextOffsetX}px, ${nextOffsetY}px) scale(${zoom})`;\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const container = this.container;\n\n        container.scrollLeft = scrollLeft;\n        container.scrollTop = scrollTop;\n    }\n    private onScroll = () => {\n        const container = this.container;\n        const { scrollLeft, scrollTop } = container;\n        const {\n            margin,\n            threshold,\n            loopX,\n            loopY, } = this;\n        const endThreshold = margin * 2 - threshold;\n        let nextLoopX = loopX;\n        let nextLoopY = loopY;\n\n        let nextScrollLeft = scrollLeft;\n        let nextScrollTop = scrollTop;\n\n        if (scrollLeft < threshold) {\n            nextScrollLeft = scrollLeft + margin;\n            --nextLoopX;\n        } else if (scrollLeft > endThreshold) {\n            nextScrollLeft = scrollLeft - margin;\n            ++nextLoopX;\n        }\n        if (scrollTop < threshold) {\n            nextScrollTop = scrollTop + margin;\n            --nextLoopY;\n        } else if (scrollTop > endThreshold) {\n            nextScrollTop = scrollTop - margin;\n            ++nextLoopY;\n        }\n        this.scrollLeft = nextScrollLeft;\n        this.scrollTop = nextScrollTop;\n        this.loopX = nextLoopX;\n        this.loopY = nextLoopY;\n\n        this.render();\n        this.trigger(\"scroll\");\n\n        if (scrollLeft !== nextScrollLeft || scrollTop !== nextScrollTop) {\n            this.move(nextScrollLeft, nextScrollTop);\n        }\n    }\n    private startAnimation(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const easing = x => 1 - Math.pow(1 - x, 3);\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n        const startTime = Date.now();\n        let prevTime = startTime;\n\n        const next = () => {\n            const now = Date.now();\n            let t = now - startTime;\n\n            if (duration < t) {\n                t = duration;\n            }\n            const ratio = easing(t / duration);\n            const prevRatio = easing((prevTime - startTime) / duration);\n\n            prevTime = now;\n\n            this.scrollBy(\n                -destPos[0] * (ratio - prevRatio),\n                -destPos[1] * (ratio - prevRatio),\n            );\n\n            if (t >= duration) {\n                return;\n            }\n            this.timer = requestAnimationFrame(next);\n        };\n        this.timer = requestAnimationFrame(next);\n    }\n    private pauseAnimation() {\n        cancelAnimationFrame(this.timer);\n    }\n}\n\ninterface InfiniteViewer extends Component, InfiniteViewerProperties {\n    // tslint:disable-next-line: max-line-length\n    on<T extends keyof InfiniteViewerEvents>(eventName: T, handlerToAttach: (event: InfiniteViewerEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n"],"names":["injector","styled","CLASS_NAME","className","PROPERTIES","OPTION_TYPES","margin","Number","threshold","zoom","scrollArea","Object","getDuration","speed","a","normalSpeed","Math","sqrt","abs","container","viewport","options","_super","_this","scrollLeft","scrollTop","endThreshold","nextLoopX","nextLoopY","nextScrollLeft","nextScrollTop","loopX","loopY","render","trigger","move","init","off","dragger","unset","injectResult","destroy","removeEvent","this","onScroll","offsetY","offsetX","deltaX","deltaY","scrollTo","getScrollLeft","getScrollTop","floor","addClass","document","createElement","style","cssText","insertBefore","firstChild","inject","Dragger","body","events","dragstart","_a","preventDefault","pauseAnimation","drag","e","datas","time","Date","now","prevSpeed","dt","measureSpeed","scrollBy","dragend","startAnimation","addEvent","size","nextOffsetX","nextOffsetY","transform","duration","easing","x","pow","destPos","startTime","prevTime","next","t","ratio","prevRatio","timer","requestAnimationFrame","cancelAnimationFrame","InfiniteViewer","Properties","prototype","property","attributes","enumerable","configurable","get","setter","camelize","set","value","defineProperty","Component","name","modules"],"mappings":"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"}