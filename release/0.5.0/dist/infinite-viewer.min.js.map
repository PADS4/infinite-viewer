{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/InfiniteViewer.tsx","../src/index.umd.ts"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\n\nexport const injector = styled(`\n{\n    position: relative;\n    display: block;\n    overflow: auto;\n}\n:host::-webkit-scrollbar {\n    display: none;\n}\n`);\n\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoom\",\n    \"rangeX\",\n    \"rangeY\",\n    \"usePinch\",\n    \"pinchThreshold\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"cspNonce\",\n    \"scrollArea\",\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof InfiniteViewerOptions]: any } = {\n    margin: Number,\n    threshold: Number,\n    zoom: Number,\n    scrollArea: Object,\n    rangeX: Array,\n    rangeY: Array,\n    pinchThreshold: Number,\n    usePinch: Boolean,\n    cspNonce: String,\n};\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n] as const;\n","import { OnDrag } from \"@daybrush/drag\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        speed[0] / 2 * duration,\n        speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n","import Component from \"@egjs/component\";\nimport Dragger from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, minmax } from \"./utils\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends Component {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private scrollArea!: HTMLElement;\n    private dragger!: Dragger;\n    private loopX = 0;\n    private loopY = 0;\n    private offsetX = 0;\n    private offsetY = 0;\n    private scrollLeft = 0;\n    private scrollTop = 0;\n    private timer = 0;\n    private dragFlag = false;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private container: HTMLElement,\n        private viewport: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            margin: 500,\n            threshold: 100,\n            zoom: 1,\n            rangeX: [-Infinity, Infinity],\n            rangeY: [-Infinity, Infinity],\n            scrollArea: null,\n            usePinch: false,\n            pinchThreshold: 30,\n            cspNonce: \"\",\n            ...options,\n        };\n        this.scrollArea = this.options.scrollArea;\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this.container;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this.viewport;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(this.container, \"scroll\", this.onScroll);\n\n        this.dragger = null;\n        this.injectResult = null;\n        this.container = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute top position\n     */\n    public getScrollTop(isAbsolute?: boolean) {\n        return (this.scrollTop + (this.loopY - 1) * this.margin - this.offsetY\n            + (isAbsolute ? (-this.rangeY[0] + 1) * this.margin : 0)) / this.zoom;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute left position\n     */\n    public getScrollLeft(isAbsolute?: boolean) {\n        return (this.scrollLeft + (this.loopX - 1) * this.margin - this.offsetX\n            + (isAbsolute ? (-this.rangeX[0] + 1) * this.margin : 0)) / this.zoom;\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth() {\n        return this.container.offsetWidth + this.margin * (this.rangeX[1] - this.rangeX[0] + 2);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight() {\n        return this.container.offsetHeight + this.margin * (this.rangeY[1] - this.rangeY[0] + 2);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter() {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.container;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewport;\n        const zoom = this.zoom;\n        const left = -(containerWidth - viewportWidth * zoom) / 2;\n        const top = -(containerHeight - viewportHeight * zoom) / 2;\n\n        return this.scrollTo(left, top);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     * @param deltaX\n     * @param deltaY\n     */\n    public scrollBy(deltaX: number, deltaY: number) {\n        const zoom = this.zoom;\n        return this.scrollTo(this.getScrollLeft() * zoom + deltaX, this.getScrollTop() * zoom + deltaY);\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(scrollLeft: number, scrollTop: number) {\n        const {\n            rangeX = [0, 0],\n            rangeY = [0, 0],\n            margin = 0,\n        } = this;\n\n        this.loopX = minmax(Math.floor((margin + scrollLeft) / margin), rangeX[0], rangeX[1]);\n        this.loopY = minmax(Math.floor((margin + scrollTop) / margin), rangeY[0], rangeY[1]);\n        this.offsetX = (this.loopX - 1) * margin - scrollLeft + this.scrollLeft;\n        this.offsetY = (this.loopY - 1) * margin - scrollTop + this.scrollTop;\n\n        this.render();\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft: this.getScrollLeft(),\n            scrollTop: this.getScrollTop(),\n        });\n        return this;\n    }\n    public setZoom(zoom: number) {\n        const viewport = this.viewport;\n        const offsetWidth = viewport.offsetWidth;\n        const offsetHeight = viewport.offsetHeight;\n        const offsetZoom = (zoom - this.zoom);\n\n        this.options.zoom = zoom;\n\n        this.scrollBy(offsetWidth * offsetZoom / 2, offsetHeight * offsetZoom / 2);\n        this.render();\n    }\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const container = this.container;\n\n        addClass(container, CLASS_NAME);\n\n        // vanilla\n        if (!this.scrollArea) {\n            this.scrollArea = document.createElement(\"div\");\n\n            const scrollArea = this.scrollArea;\n\n            scrollArea.style.cssText += `position:absolute;top:0;left:0;`;\n            container.insertBefore(scrollArea, container.firstChild);\n        }\n        this.injectResult = injector.inject(container, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.dragger = new Dragger(container, {\n            container: document.body,\n            events: [\"touch\"],\n            dragstart: ({ inputEvent, datas }) => {\n                inputEvent.preventDefault();\n                this.pauseAnimation();\n                this.dragFlag = false;\n\n                datas.startEvent = inputEvent;\n                return this.trigger(\"dragStart\", {\n                    inputEvent,\n                });\n            },\n            drag: e => {\n                const options = this.options;\n                if (!options.usePinch || e.isPinch) {\n                    this.trigger(\"drag\", {\n                        inputEvent: e.inputEvent,\n                    });\n                    measureSpeed(e);\n                    this.scrollBy(-e.deltaX, -e.deltaY);\n                } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                    this.dragFlag = true;\n\n                    this.trigger(\"abortPinch\", {\n                        inputEvent: e.datas.startEvent || e.inputEvent,\n                    });\n                }\n            },\n            dragend: e => {\n                this.trigger(\"dragEnd\", {\n                    isDrag: e.isDrag,\n                    isDouble: e.isDouble,\n                    inputEvent: e.inputEvent,\n                });\n                this.startAnimation(e.datas.speed);\n            },\n            pinchstart: ({ inputEvent, datas }) => {\n                inputEvent.preventDefault();\n                this.pauseAnimation();\n                datas.startZoom = this.zoom;\n            },\n            pinch: e => {\n                // e.distance;\n                // e.scale\n                this.trigger(\"pinch\", {\n                    distance: e.distance,\n                    scale: e.scale,\n                    zoom: e.datas.startZoom * e.scale,\n                    inputEvent: e.inputEvent,\n                });\n            },\n        });\n        const margin = this.margin;\n\n        addEvent(container, \"scroll\", this.onScroll);\n        this.render();\n        this.move(margin, margin);\n    }\n    private render() {\n        const {\n            margin = 0,\n            loopX,\n            loopY,\n            offsetX,\n            offsetY,\n            zoom = 1,\n        } = this;\n        const size = `calc(100% + ${margin * 2}px)`;\n        const nextOffsetX = (1 - loopX) * margin + offsetX;\n        const nextOffsetY = (1 - loopY) * margin + offsetY;\n\n        this.scrollArea.style.cssText += `position:absolute;top:0;left:0;width:${size};height:${size};`;\n        this.viewport.style.cssText = `transform-origin: 0 0;transform:translate(${nextOffsetX}px, ${nextOffsetY}px) scale(${zoom});`;\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const container = this.container;\n\n        container.scrollLeft = scrollLeft;\n        container.scrollTop = scrollTop;\n    }\n    private onScroll = () => {\n        const container = this.container;\n        const { scrollLeft, scrollTop } = container;\n        const {\n            margin = 0,\n            threshold = 0,\n            loopX,\n            loopY,\n            rangeX = [0, 0],\n            rangeY = [0, 0],\n        } = this;\n        const endThreshold = margin * 2 - threshold;\n        let nextLoopX = loopX;\n        let nextLoopY = loopY;\n\n        let nextScrollLeft = scrollLeft;\n        let nextScrollTop = scrollTop;\n\n        if (scrollLeft < threshold) {\n            if (nextLoopX > rangeX[0]) {\n                nextScrollLeft = scrollLeft + margin;\n                --nextLoopX;\n            }\n        } else if (scrollLeft > endThreshold) {\n            if (nextLoopX < rangeX[1]) {\n                nextScrollLeft = scrollLeft - margin;\n                ++nextLoopX;\n            }\n        }\n        if (scrollTop < threshold) {\n            if (nextLoopY > rangeY[0]) {\n                nextScrollTop = scrollTop + margin;\n                --nextLoopY;\n            }\n        } else if (scrollTop > endThreshold) {\n            if (nextLoopY < rangeY[1]) {\n                nextScrollTop = scrollTop - margin;\n                ++nextLoopY;\n            }\n        }\n        const isChangeScroll = this.scrollLeft !== nextScrollLeft || this.scrollTop !== nextScrollTop;\n        const isChangeLoop = loopX !== nextLoopX || loopY !== nextLoopY;\n\n        this.scrollLeft = nextScrollLeft;\n        this.scrollTop = nextScrollTop;\n        this.loopX = nextLoopX;\n        this.loopY = nextLoopY;\n\n        this.render();\n\n        if (isChangeLoop || isChangeScroll) {\n            this.trigger(\"scroll\", {\n                scrollLeft: this.getScrollLeft(),\n                scrollTop: this.getScrollTop(),\n            });\n        }\n\n        if (isChangeScroll) {\n            this.move(nextScrollLeft, nextScrollTop);\n        }\n    }\n    private startAnimation(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const easing = x => 1 - Math.pow(1 - x, 3);\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n        const startTime = Date.now();\n        let prevTime = startTime;\n\n        const next = () => {\n            const now = Date.now();\n            let t = now - startTime;\n\n            if (duration < t) {\n                t = duration;\n            }\n            const ratio = easing(t / duration);\n            const prevRatio = easing((prevTime - startTime) / duration);\n\n            prevTime = now;\n\n            this.scrollBy(\n                -destPos[0] * (ratio - prevRatio),\n                -destPos[1] * (ratio - prevRatio),\n            );\n\n            if (t >= duration) {\n                return;\n            }\n            this.timer = requestAnimationFrame(next);\n        };\n        this.timer = requestAnimationFrame(next);\n    }\n    private pauseAnimation() {\n        cancelAnimationFrame(this.timer);\n    }\n}\n\ninterface InfiniteViewer extends Component, InfiniteViewerProperties {\n    // tslint:disable-next-line: max-line-length\n    on<T extends keyof InfiniteViewerEvents>(eventName: T, handlerToAttach: (event: InfiniteViewerEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n"],"names":["injector","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","margin","Number","threshold","zoom","scrollArea","Object","rangeX","Array","rangeY","pinchThreshold","usePinch","Boolean","cspNonce","String","getDuration","speed","a","normalSpeed","Math","sqrt","abs","minmax","value","min","max","container","viewport","options","_super","_this","scrollLeft","scrollTop","_b","_c","loopX","loopY","_d","_e","endThreshold","nextLoopX","nextLoopY","nextScrollLeft","nextScrollTop","isChangeScroll","isChangeLoop","render","trigger","getScrollLeft","getScrollTop","move","Infinity","init","this","off","dragger","unset","injectResult","destroy","removeEvent","onScroll","isAbsolute","offsetY","offsetX","offsetWidth","offsetHeight","_a","containerWidth","containerHeight","viewportWidth","viewportHeight","left","top","scrollTo","deltaX","deltaY","floor","offsetZoom","scrollBy","document","createElement","style","cssText","insertBefore","firstChild","inject","nonce","Dragger","body","events","dragstart","inputEvent","datas","preventDefault","pauseAnimation","dragFlag","startEvent","drag","e","isPinch","time","Date","now","prevSpeed","dt","measureSpeed","movement","dragend","isDrag","isDouble","startAnimation","pinchstart","startZoom","pinch","distance","scale","addEvent","size","nextOffsetX","nextOffsetY","duration","easing","x","pow","destPos","startTime","prevTime","next","t","ratio","prevRatio","timer","requestAnimationFrame","cancelAnimationFrame","InfiniteViewer","prototype","property","attributes","enumerable","configurable","get","setter","set","defineProperty","Component","name","modules"],"mappings":"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"}