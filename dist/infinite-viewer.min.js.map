{"version":3,"file":"infinite-viewer.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/ScrollBar.ts","../src/InfiniteViewer.tsx","../src/index.umd.ts"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\nimport getAgent from \"@egjs/agent\";\nimport { prefixCSS } from \"framework-utils\";\n\nexport const agent = getAgent();\nexport const IS_SAFARI = agent.browser.name === \"safari\";\n\nexport const PREFIX = \"infinite-viewer-\";\n\nexport const WRAPPER_CLASS_NAME = `${PREFIX}wrapper`;\nexport const SCROLL_AREA_CLASS_NAME = `${PREFIX}scroll-area`;\n\nexport const SCROLL_BAR_CLASS_NAME = `${PREFIX}scroll-bar`;\nexport const HORIZONTAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}horizontal-scroll-bar`;\nexport const VERTICAL_SCROLL_BAR_CLASS_NAME = `${PREFIX}vertical-scroll-bar`;\nexport const SCROLL_THUMB_CLASS_NAME = `${PREFIX}scroll-thumb`;\n\nexport const injector = styled(prefixCSS(PREFIX, `\n{\n    position: relative;\n    overscroll-behavior: none;\n}\n.wrapper {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    top: 0;\n    left: 0;\n    will-change: scroll-position;\n}\n.wrapper::-webkit-scrollbar {\n    display: none;\n}\n.scroll-area {\n    position:absolute;\n    top:0;\n    left:0;\n    transform-origin: 0 0;\n}\n.scroll-bar {\n    position:absolute;\n    width: 10px;\n    height: 10px;\n    box-sizing: border-box;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n}\n.horizontal-scroll-bar {\n    width: 100%;\n    height: 14px;\n}\n.vertical-scroll-bar {\n    height: 100%;\n    width: 14px;\n}\n.scroll-thumb {\n    position:relative;\n    opacity: 0.7;\n    background: #333;\n    border-radius: 3px;\n    left: 0px;\n    top: 0px;\n    z-index: 10;\n    width: 6px;\n    height: 6px;\n    transition: all ease 0.2s;\n}\n.horizontal-scroll-bar .scroll-thumb {\n    margin: 4px 0px;\n    transition-property: margin, height, border-radius;\n}\n.vertical-scroll-bar .scroll-thumb {\n    margin: 0px 4px;\n    transition-property: margin, width, border-radius;\n}\n.horizontal-scroll-bar:hover .scroll-thumb {\n    height: 10px;\n    margin: 2px 0px;\n    border-radius: 5px;\n}\n.vertical-scroll-bar:hover .scroll-thumb {\n    width: 10px;\n    margin: 0px 2px;\n    border-radius: 5px;\n}\n`));\n\nexport const DEFAULT_OPTIONS = {\n    margin: 500,\n    threshold: 100,\n    zoom: 1,\n    rangeX: [-Infinity, Infinity],\n    rangeY: [-Infinity, Infinity],\n    wrapperElement: null,\n    scrollAreaElement: null,\n    horizontalScrollElement: null,\n    verticalScrollElement: null,\n    usePinch: false,\n    pinchThreshold: 30,\n    cspNonce: \"\",\n    wheelScale: 0.01,\n    displayHorizontalScroll: true,\n    displayVerticalScroll: true,\n    useForceWheel: false,\n};\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoom\",\n    \"rangeX\",\n    \"rangeY\",\n    \"usePinch\",\n    \"pinchThreshold\",\n    \"wheelScale\",\n    \"displayVerticalScroll\",\n    \"displayHorizontalScroll\",\n    \"useForceWheel\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"cspNonce\",\n    \"wrapperElement\",\n    \"scrollAreaElement\",\n    \"verticalScrollElement\",\n    \"horizontalScrollElement\",\n] as const;\nexport const OPTION_TYPES: { [key in keyof InfiniteViewerOptions]: any } = {\n    margin: Number,\n    threshold: Number,\n    zoom: Number,\n    wrapperElement: Object,\n    scrollAreaElement: Object,\n    verticalScrollElement: Object,\n    horizontalScrollElement: Object,\n    rangeX: Array,\n    rangeY: Array,\n    pinchThreshold: Number,\n    usePinch: Boolean,\n    useForceWheel: Boolean,\n    cspNonce: String,\n    wheelScale: Number,\n    displayHorizontalScroll: Boolean,\n    displayVerticalScroll: Boolean,\n};\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n    \"abortPinch\",\n    \"dragStart\",\n    \"dragEnd\",\n    \"pinchStart\",\n    \"pinch\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"scrollCenter\",\n    \"getContainer\",\n    \"getViewport\",\n    \"getWrapper\",\n    \"setZoom\",\n    \"getRangeX\",\n    \"getRangeY\",\n] as const;\n\nexport const TINY_NUM = 0.000001;\n","import { OnDrag } from \"gesto\";\nimport { TINY_NUM } from \"./consts\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        speed[0] / 2 * duration,\n        speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n\nexport function abs(v: number) {\n    return Math.abs(v);\n}\n\nexport function getRange(\n    pos: number,\n    margin: number,\n    range: number[],\n    threshold: number,\n    isReal: boolean,\n) {\n    const min = isReal || isFinite(range[0])\n        ? range[0]\n        : Math.min(-1, Math.floor(pos / margin)) * margin - threshold;\n    const max = isReal || isFinite(range[1])\n        ? range[1]\n        : Math.max(1, Math.ceil(pos / margin)) * margin + threshold;\n\n    return [min, max];\n}\n\nexport function throttle(value: number) {\n    return Math.round(value / TINY_NUM) * TINY_NUM;\n}\n","import Gesto from \"gesto\";\nimport {\n    SCROLL_BAR_CLASS_NAME, SCROLL_THUMB_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { addClass, removeEvent, addEvent } from \"@daybrush/utils\";\nimport Component from \"@egjs/component\";\n\nexport default class ScrollBar extends Component {\n    public isAppend: boolean = false;\n    public thumbElement!: HTMLElement;\n    private gesto!: Gesto;\n    private pos: number = 0;\n    private size: number = 0;\n    private scrollSize: number = 0;\n    private isHorizontal = false;\n    constructor(\n        private type: \"horizontal\" | \"vertical\",\n        public barElement?: HTMLElement,\n    ) {\n        super();\n        const isHorizontal = type === \"horizontal\";\n\n        this.isHorizontal = isHorizontal;\n        if (!barElement) {\n            barElement = document.createElement(\"div\");\n            const thumbElement = document.createElement(\"div\");\n\n            addClass(\n                barElement,\n                isHorizontal ? HORIZONTAL_SCROLL_BAR_CLASS_NAME\n                    : VERTICAL_SCROLL_BAR_CLASS_NAME,\n            );\n            addClass(barElement, SCROLL_BAR_CLASS_NAME);\n            addClass(thumbElement, SCROLL_THUMB_CLASS_NAME);\n\n            barElement.insertBefore(thumbElement, null);\n\n            this.barElement = barElement;\n            this.thumbElement = thumbElement;\n            this.isAppend = true;\n        } else {\n            this.thumbElement = barElement.querySelector(`.${SCROLL_THUMB_CLASS_NAME}`);\n        }\n        this.gesto = new Gesto(this.barElement, {\n            container: window,\n        }).on(\"dragStart\", e => {\n            const target = e.inputEvent.target;\n            const datas = e.datas;\n            const isThumb = this.thumbElement === target;\n\n            if (!isThumb) {\n                setTimeout(() => {\n                    requestAnimationFrame(() => {\n                        const thumbRect = this.thumbElement.getBoundingClientRect();\n                        const pos1 = thumbRect[isHorizontal ? \"left\" : \"top\"];\n                        const thumbSize = thumbRect[isHorizontal ? \"width\" : \"height\"];\n                        const pos2 = pos1 + thumbSize;\n                        const clientPos = e[isHorizontal ? \"clientX\" : \"clientY\"];\n\n                        if (pos1 <= clientPos && clientPos <= pos2) {\n                            return;\n                        }\n                        const size = this.size;\n                        const delta = size * size / this.scrollSize;\n\n                        this.scrollBy(pos1 < clientPos ? delta : -delta);\n                    });\n                }, 100);\n\n            }\n            datas.isThumb = isThumb;\n            e.inputEvent.stopPropagation();\n            e.inputEvent.preventDefault();\n        }).on(\"drag\", e => {\n            if (!e.datas.isThumb) {\n                return;\n            }\n            this.scrollBy(this.isHorizontal ? e.deltaX : e.deltaY);\n        });\n        addEvent(this.barElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n    }\n    public scrollBy(delta: number) {\n        const ratio = delta / this.size;\n\n        this.trigger(\"scroll\", {\n            delta: this.scrollSize * ratio,\n        });\n    }\n    public render(isDisplay: boolean, pos: number, size: number, scrollSize: number) {\n        this.pos = pos;\n        this.size = size;\n        this.scrollSize = scrollSize;\n\n        const display = isDisplay && (scrollSize > size) ? \"block\" : \"none\";\n        const [dirName1, sizeName] = this.isHorizontal ? [\"X\", \"width\"] : [\"Y\", \"height\"];\n\n        this.barElement.style.cssText = `display: ${display};`;\n        this.thumbElement.style.cssText\n            += `${sizeName}: ${size * size / scrollSize}px;`\n            + `transform: translate${dirName1}(${pos / scrollSize * size}px)`;\n    }\n    public destroy() {\n        removeEvent(this.barElement, \"wheel\", this.onWheel);\n        this.gesto.off();\n        this.off();\n    }\n    private onWheel = (e: WheelEvent) => {\n        const delta = this.isHorizontal ? e.deltaX : e.deltaY;\n\n        if (delta) {\n            e.preventDefault();\n        }\n        this.trigger(\"scroll\", {\n            delta,\n        });\n    }\n}\n","import Component from \"@egjs/component\";\nimport Gesto from \"gesto\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents } from \"./types\";\nimport {\n    PROPERTIES, injector, CLASS_NAME, TINY_NUM,\n    IS_SAFARI, DEFAULT_OPTIONS,\n    WRAPPER_CLASS_NAME, SCROLL_AREA_CLASS_NAME,\n    HORIZONTAL_SCROLL_BAR_CLASS_NAME, VERTICAL_SCROLL_BAR_CLASS_NAME\n} from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, abs, getRange } from \"./utils\";\nimport ScrollBar from \"./ScrollBar\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function (value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function (value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\n/**\n * @sort 1\n */\nclass InfiniteViewer extends Component {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private wrapperElement!: HTMLElement;\n    private scrollAreaElement!: HTMLElement;\n    private horizontalScrollbar: ScrollBar;\n    private verticalScrollbar: ScrollBar;\n    private gesto!: Gesto;\n    private offsetX = 0;\n    private offsetY = 0;\n    private containerWidth = 0;\n    private containerHeight = 0;\n    private viewportWidth = 0;\n    private viewportHeight = 0;\n    private scrollLeft = 0;\n    private scrollTop = 0;\n    private timer = 0;\n    private dragFlag = false;\n    private tempScale = 1;\n    private isLoop = false;\n    /**\n     * @sort 1\n     */\n    constructor(\n        private containerElement: HTMLElement,\n        private viewportElement: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            ...DEFAULT_OPTIONS,\n            ...options,\n        };\n        this.init();\n    }\n    /**\n     * Get Container Element\n     */\n    public getContainer(): HTMLElement {\n        return this.containerElement;\n    }\n    /**\n     * Get Viewport Element\n     */\n    public getViewport(): HTMLElement {\n        return this.viewportElement;\n    }\n    /**\n     * Get Wrapper Element\n     */\n    public getWrapper(): HTMLElement {\n        return this.wrapperElement;\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.gesto.unset();\n        this.verticalScrollbar.destroy();\n        this.horizontalScrollbar.destroy();\n        this.injectResult.destroy();\n        const containerElement = this.containerElement;\n\n        removeEvent(window, \"resize\", this.resize);\n        removeEvent(this.wrapperElement, \"scroll\", this.onScroll);\n        removeEvent(containerElement, \"wheel\", this.onWheel);\n        removeEvent(containerElement, \"tgesturestart\", this.onGestureStart);\n        removeEvent(containerElement, \"gesturechange\", this.onGestureChange);\n\n        this.gesto = null;\n        this.injectResult = null;\n        this.containerElement = null;\n        this.viewportElement = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute top position\n     */\n    public getScrollTop(isAbsolute?: boolean) {\n        return this.scrollTop / this.zoom + this.offsetY\n            + (isAbsolute ? abs(this.getRangeY()[0]) : 0);\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute left position\n     */\n    public getScrollLeft(isAbsolute?: boolean) {\n        return this.scrollLeft / this.zoom + this.offsetX\n            + (isAbsolute ? abs(this.getRangeX()[0]) : 0);\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth(isZoom?: boolean) {\n        const range = this.getRangeX(isZoom);\n\n        return this.containerWidth + abs(range[0]) + abs(range[1]);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight(isZoom?: boolean) {\n        const range = this.getRangeY(isZoom);\n\n        return this.containerHeight + abs(range[0]) + abs(range[1]);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter() {\n        this.resize();\n\n        const zoom = this.zoom;\n        const left = -(this.containerWidth / zoom - this.viewportWidth) / 2;\n        const top = -(this.containerHeight / zoom - this.viewportHeight) / 2;\n\n        return this.scrollTo(left, top);\n    }\n    /**\n     * Update Viewer Sizes\n     * @method\n     */\n    public resize = () => {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.containerElement;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewportElement;\n\n        this.containerWidth = containerWidth;\n        this.containerHeight = containerHeight;\n        this.viewportWidth = viewportWidth;\n        this.viewportHeight = viewportHeight;\n    }\n    /**\n     * Scrolls the container by the given amount.\n     */\n    public scrollBy(deltaX: number, deltaY: number) {\n        return this.scrollTo(this.getScrollLeft() + deltaX, this.getScrollTop() + deltaY);\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(x: number, y: number) {\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n            margin = DEFAULT_OPTIONS.margin,\n            threshold = DEFAULT_OPTIONS.threshold,\n            scrollLeft: prevScrollLeft,\n            scrollTop: prevScrollTop,\n        } = this;\n\n        const [minX, maxX] = this.getRangeX(true, true);\n        const [minY, maxY] = this.getRangeY(true, true);\n\n        let scrollLeft = prevScrollLeft;\n        let scrollTop = prevScrollTop;\n\n        const scrollAreaWidth = this.getScrollAreaWidth();\n        const scrollAreaHeight = this.getScrollAreaHeight();\n        const zoomX = x * zoom;\n        const zoomY = y * zoom;\n\n        if (zoomX - threshold <= minX) {\n            const minThreshold = Math.max(0, zoomX - minX);\n\n            scrollLeft = minThreshold;\n            x = (minX + minThreshold) / zoom;\n        } else if (zoomX + threshold >= maxX) {\n            const maxThreshold = Math.max(0, maxX - zoomX);\n\n            scrollLeft = scrollAreaWidth - maxThreshold;\n            x = (maxX - maxThreshold) / zoom;\n        } else if (scrollLeft < threshold) {\n            scrollLeft += margin;\n        } else if (scrollLeft > scrollAreaWidth - threshold) {\n            scrollLeft -= margin;\n        }\n\n        if (zoomY - threshold <= minY) {\n            const minThreshold = Math.max(0, zoomY - minY);\n\n            scrollTop = minThreshold;\n            y = (minY + minThreshold) / zoom;\n        } else if (zoomY + threshold >= maxY) {\n            const maxThreshold = Math.max(0, maxY - zoomY);\n\n            scrollTop = scrollAreaHeight - maxThreshold;\n            y = (maxY - maxThreshold) / zoom;\n        } else if (scrollTop < threshold) {\n            scrollTop += margin;\n        } else if (scrollTop > scrollAreaHeight - threshold) {\n            scrollTop -= margin;\n        }\n        scrollLeft = Math.round(scrollLeft);\n        scrollTop = Math.round(scrollTop);\n\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n\n        this.offsetX = x - scrollLeft / zoom;\n        this.offsetY = y - scrollTop / zoom;\n\n        this.render();\n        const nextX = this.getScrollLeft();\n        const nextY = this.getScrollTop();\n\n        /**\n         * The `scroll` event fires when the document view or an element has been scrolled.\n         * @memberof InfiniteViewer\n         * @event scroll\n         * @param {InfiniteViewer.OnScroll} - Parameters for the scroll event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"scroll\", () => {\n         *   console.log(viewer.getScrollLeft(), viewer.getScrollTop());\n         * });\n         */\n        this.trigger(\"scroll\", {\n            scrollLeft: nextX,\n            scrollTop: nextY,\n        });\n        if (prevScrollLeft !== scrollLeft || prevScrollTop !== scrollTop) {\n            this.isLoop = true;\n            this.move(scrollLeft, scrollTop);\n            requestAnimationFrame(() => {\n                if (!this.isLoop) {\n                    return;\n                }\n                this.isLoop = false;\n                const {\n                    scrollLeft: requestScrollLeft,\n                    scrollTop: requestScrollTop,\n                } = this.wrapperElement;\n\n                this.scrollLeft = requestScrollLeft;\n                this.scrollTop = requestScrollTop;\n\n                if (scrollLeft !== requestScrollLeft || scrollTop !== requestScrollTop) {\n                    console.log(\"??\");\n                    this.scrollTo(nextX, nextY);\n                }\n            });\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Set viewer zoom\n     */\n    public setZoom(zoom: number) {\n        const {\n            containerWidth,\n            containerHeight,\n            zoom: prevZoom,\n        } = this;\n\n        const scrollLeft = this.getScrollLeft();\n        const scrollTop = this.getScrollTop();\n\n        this.options.zoom = zoom;\n\n        const nextScrollLeft = this.getScrollLeft();\n        const nextScrollTop = this.getScrollTop();\n\n        const centerX = scrollLeft + containerWidth / prevZoom / 2;\n        const centerY = scrollTop + containerHeight / prevZoom / 2;\n\n        const nextCenterX = nextScrollLeft + containerWidth / zoom / 2;\n        const nextCenterY = nextScrollTop + containerHeight / zoom / 2;\n\n        this.scrollBy(centerX - nextCenterX, centerY - nextCenterY);\n        this.render();\n    }\n    /**\n     * get x ranges\n     */\n    public getRangeX(isZoom?: boolean, isReal?: boolean) {\n        const {\n            rangeX = DEFAULT_OPTIONS.rangeX,\n            margin = DEFAULT_OPTIONS.margin,\n            zoom = DEFAULT_OPTIONS.zoom,\n            threshold,\n        } = this;\n\n        const range = getRange(\n            this.getScrollLeft(),\n            margin,\n            rangeX,\n            threshold,\n            isReal,\n        );\n\n        if (!isZoom) {\n            return range;\n        }\n        return [\n            range[0] * zoom,\n            Math.max(this.viewportWidth * zoom - this.containerWidth, range[1] * zoom),\n        ];\n    }\n    /**\n     * get y ranges\n     */\n    public getRangeY(isZoom?: boolean, isReal?: boolean) {\n        const {\n            rangeY = DEFAULT_OPTIONS.rangeY,\n            margin = DEFAULT_OPTIONS.margin,\n            zoom = DEFAULT_OPTIONS.zoom,\n            threshold,\n        } = this;\n\n        const range = getRange(\n            this.getScrollTop(),\n            margin,\n            rangeY,\n            threshold,\n            isReal,\n        );\n        if (!isZoom) {\n            return range;\n        }\n        return [\n            range[0] * zoom,\n            Math.max(this.viewportHeight * zoom - this.containerHeight, range[1] * zoom),\n        ];\n    }\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const containerElement = this.containerElement;\n        const options = this.options;\n        addClass(containerElement, CLASS_NAME);\n\n        // vanilla\n        let wrapperElement = options.wrapperElement\n            || containerElement.querySelector(`.${WRAPPER_CLASS_NAME}`);\n        let scrollAreaElement = options.scrollAreaElement\n            || containerElement.querySelector(`.${SCROLL_AREA_CLASS_NAME}`);\n        const horizontalScrollElement = options.horizontalScrollElement\n            || containerElement.querySelector(`.${HORIZONTAL_SCROLL_BAR_CLASS_NAME}`);\n        const verticalScrollElement = options.verticalScrollElement\n            || containerElement.querySelector(`.${VERTICAL_SCROLL_BAR_CLASS_NAME}`);\n\n        if (wrapperElement) {\n            this.wrapperElement = wrapperElement;\n        } else {\n            wrapperElement = document.createElement(\"div\");\n\n            addClass(wrapperElement, WRAPPER_CLASS_NAME);\n\n            wrapperElement.insertBefore(this.viewportElement, null);\n            containerElement.insertBefore(wrapperElement, null);\n\n            this.wrapperElement = wrapperElement;\n        }\n        if (scrollAreaElement) {\n            this.scrollAreaElement = scrollAreaElement;\n        } else {\n            scrollAreaElement = document.createElement(\"div\");\n\n            addClass(scrollAreaElement, SCROLL_AREA_CLASS_NAME);\n            wrapperElement.insertBefore(scrollAreaElement, wrapperElement.firstChild);\n\n            this.scrollAreaElement = scrollAreaElement;\n        }\n        this.horizontalScrollbar = new ScrollBar(\"horizontal\", horizontalScrollElement);\n        this.verticalScrollbar = new ScrollBar(\"vertical\", verticalScrollElement);\n\n        this.horizontalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(e.delta / this.zoom, 0);\n        });\n\n        this.verticalScrollbar.on(\"scroll\", e => {\n            this.scrollBy(0, e.delta / this.zoom);\n        });\n\n        if (this.horizontalScrollbar.isAppend) {\n            containerElement.insertBefore(this.horizontalScrollbar.barElement, null);\n        }\n        if (this.verticalScrollbar.isAppend) {\n            containerElement.insertBefore(this.verticalScrollbar.barElement, null);\n        }\n        addClass(containerElement, CLASS_NAME);\n        this.injectResult = injector.inject(containerElement, {\n            nonce: this.options.cspNonce,\n        });\n        /**\n         * the `dragStart` event fires when `touchstart` does occur.\n         * @memberof InfiniteViewer\n         * @event dragStart\n         * @param {InfiniteViewer.OnDragStart} - Parameters for the `dragStart` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragStart\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `drag` event fires when `touch` does occur.\n         * @memberof InfiniteViewer\n         * @event drag\n         * @param {InfiniteViewer.OnDrag} - Parameters for the `drag` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"drag\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `dragEnd` event fires when `touchend` does occur.\n         * @memberof InfiniteViewer\n         * @event dragEnd\n         * @param {InfiniteViewer.OnDragEnd} - Parameters for the `dragEnd` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         * ).on(\"dragEnd\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `abortPinch` event fires when `pinch` event does not occur by dragging a certain area.\n         * @memberof InfiniteViewer\n         * @event abortPinch\n         * @param {InfiniteViewer.OnAbortPinch} - Parameters for the abortPinch event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"abortPinch\", e => {\n         *   console.log(e.inputEvent);\n         * });\n         */\n        /**\n         * the `pinch` event fires when two points pinch the viewer\n         * @memberof InfiniteViewer\n         * @event pinch\n         * @param {InfiniteViewer.OnPinch} - Parameters for the `pinch` event\n         * @example\n         * import InfiniteViewer from \"infinite-viewer\";\n         *\n         * const viewer = new InfiniteViewer(\n         *   document.querySelector(\".container\"),\n         *   document.querySelector(\".viewport\"),\n         *   {\n         *     usePinch: true,\n         *   }\n         * ).on(\"pinch\", e => {\n         *   console.log(e.zoom, e.inputEvent);\n         * });\n         */\n        this.gesto = new Gesto(containerElement, {\n            container: document.body,\n            events: [\"touch\"],\n        }).on(\"dragStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this.pauseAnimation();\n            this.dragFlag = false;\n\n            datas.startEvent = inputEvent;\n            const result = this.trigger(\"dragStart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n        }).on(\"drag\", e => {\n            if (!this.options.usePinch || e.isPinch) {\n                this.trigger(\"drag\", {\n                    inputEvent: e.inputEvent,\n                });\n                measureSpeed(e);\n                const zoom = this.zoom;\n                this.scrollBy(-e.deltaX / zoom, -e.deltaY / zoom);\n            } else if (!this.dragFlag && e.movement > options.pinchThreshold) {\n                this.dragFlag = true;\n\n                this.trigger(\"abortPinch\", {\n                    inputEvent: e.datas.startEvent || e.inputEvent,\n                });\n            }\n        }).on(\"dragEnd\", e => {\n            this.trigger(\"dragEnd\", {\n                isDrag: e.isDrag,\n                isDouble: e.isDouble,\n                inputEvent: e.inputEvent,\n            });\n            this.startAnimation(e.datas.speed);\n        }).on(\"pinchStart\", ({ inputEvent, datas, stop }) => {\n            inputEvent.preventDefault();\n            this.pauseAnimation();\n            datas.startZoom = this.zoom;\n\n            const result = this.trigger(\"pinchstart\", {\n                inputEvent,\n            });\n            if (result === false) {\n                stop();\n            }\n        }).on(\"pinch\", e => {\n            // e.distance;\n            // e.scale\n            this.trigger(\"pinch\", {\n                rotation: e.rotation,\n                distance: e.distance,\n                scale: e.scale,\n                zoom: e.datas.startZoom * e.scale,\n                inputEvent: e.inputEvent,\n            });\n        });\n\n        addEvent(wrapperElement, \"scroll\", this.onScroll);\n        addEvent(window, \"resize\", this.resize);\n        addEvent(containerElement, \"wheel\", this.onWheel, {\n            passive: false,\n        });\n\n        addEvent(containerElement, \"gesturestart\", this.onGestureStart, {\n            passive: false,\n        });\n        addEvent(containerElement, \"gesturechange\", this.onGestureChange, {\n            passive: false,\n        });\n        this.resize();\n        this.render();\n        this.scrollTo(0, 0);\n    }\n    private render() {\n        const {\n            offsetX,\n            offsetY,\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const nextOffsetX = -offsetX * zoom;\n        const nextOffsetY = -offsetY * zoom;\n\n        this.scrollAreaElement.style.cssText\n            = `width:calc(100% + ${this.getScrollAreaWidth()}px);`\n            + `height:calc(100% + ${this.getScrollAreaHeight()}px);`;\n        this.viewportElement.style.cssText += `transform-origin: 0 0;transform:translate(${nextOffsetX}px, ${nextOffsetY}px) scale(${zoom});`;\n        this.renderScroll();\n    }\n    private renderScroll() {\n        const {\n            containerWidth,\n            containerHeight,\n            zoom,\n        } = this;\n        const scrollLeft = this.getScrollLeft(true) * zoom;\n        const scrollTop = this.getScrollTop(true) * zoom;\n        const scrollWidth = this.getScrollWidth(true);\n        const scrollHeight = this.getScrollHeight(true);\n\n        this.horizontalScrollbar.render(\n            this.displayHorizontalScroll,\n            scrollLeft,\n            containerWidth,\n            scrollWidth,\n        );\n        this.verticalScrollbar.render(\n            this.displayVerticalScroll,\n            scrollTop,\n            containerHeight,\n            scrollHeight,\n        );\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const wrapperElement = this.wrapperElement;\n\n        wrapperElement.scrollLeft = scrollLeft;\n        wrapperElement.scrollTop = scrollTop;\n    }\n    private onScroll = () => {\n        const { scrollLeft, scrollTop } = this.wrapperElement;\n        const {\n            zoom = DEFAULT_OPTIONS.zoom,\n        } = this;\n        const deltaX = scrollLeft - this.scrollLeft;\n        const deltaY = scrollTop - this.scrollTop;\n        const viewerScrollLeft = this.getScrollLeft();\n        const viewerScrollTop = this.getScrollTop();\n\n        if (this.isLoop) {\n            this.isLoop = false;\n        }\n        this.scrollLeft = scrollLeft;\n        this.scrollTop = scrollTop;\n        this.scrollTo(\n            viewerScrollLeft + deltaX / zoom,\n            viewerScrollTop + deltaY / zoom,\n        );\n    }\n    private onWheel = (e: WheelEvent) => {\n        const ctrlKey = e.ctrlKey;\n        const options = this.options;\n\n        if (ctrlKey) {\n            const distance = -e.deltaY;\n            const scale = Math.max(1 + distance * (options.wheelScale || 0.01), TINY_NUM);\n\n            this.trigger(\"pinch\", {\n                distance,\n                scale,\n                rotation: 0,\n                zoom: this.zoom * scale,\n                inputEvent: e,\n            });\n        } else if (IS_SAFARI || options.useForceWheel) {\n            const zoom = this.zoom;\n            this.scrollBy(e.deltaX / zoom, e.deltaY / zoom);\n        } else {\n            return;\n        }\n        e.preventDefault();\n    }\n    private onGestureStart = (e: any) => {\n        this.tempScale = this.zoom;\n        e.preventDefault();\n    }\n    private onGestureChange = (e: any) => {\n        e.preventDefault();\n        if (this.gesto.isFlag() || !this.tempScale) {\n            this.tempScale = 0;\n            return;\n        }\n        const scale = e.scale;\n\n        this.trigger(\"pinch\", {\n            distance: 0,\n            scale,\n            rotation: e.rotation,\n            zoom: this.tempScale * scale,\n            inputEvent: e,\n        });\n    }\n    private startAnimation(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const easing = x => 1 - Math.pow(1 - x, 3);\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n        const startTime = Date.now();\n        let prevTime = startTime;\n\n        const next = () => {\n            const now = Date.now();\n            let t = now - startTime;\n\n            if (duration < t) {\n                t = duration;\n            }\n            const ratio = easing(t / duration);\n            const prevRatio = easing((prevTime - startTime) / duration);\n\n            prevTime = now;\n\n            this.scrollBy(\n                -destPos[0] * (ratio - prevRatio),\n                -destPos[1] * (ratio - prevRatio),\n            );\n\n            if (t >= duration) {\n                return;\n            }\n            this.timer = requestAnimationFrame(next);\n        };\n        this.timer = requestAnimationFrame(next);\n    }\n    private pauseAnimation() {\n        cancelAnimationFrame(this.timer);\n    }\n    private getScrollAreaWidth() {\n        const [min, max] = this.getRangeX(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n    private getScrollAreaHeight() {\n        const [min, max] = this.getRangeY(true);\n        return min || max ? this.margin * 2 : 0;\n    }\n}\n\ninterface InfiniteViewer extends Component, InfiniteViewerProperties {\n    // tslint:disable-next-line: max-line-length\n    on<T extends keyof InfiniteViewerEvents>(eventName: T, handlerToAttach: (event: InfiniteViewerEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n"],"names":["IS_SAFARI","browser","name","PREFIX","WRAPPER_CLASS_NAME","SCROLL_AREA_CLASS_NAME","HORIZONTAL_SCROLL_BAR_CLASS_NAME","VERTICAL_SCROLL_BAR_CLASS_NAME","SCROLL_THUMB_CLASS_NAME","injector","DEFAULT_OPTIONS","margin","threshold","zoom","rangeX","Infinity","rangeY","wrapperElement","scrollAreaElement","horizontalScrollElement","verticalScrollElement","usePinch","pinchThreshold","cspNonce","wheelScale","displayHorizontalScroll","displayVerticalScroll","useForceWheel","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","Number","Object","Array","Boolean","String","getDuration","speed","a","normalSpeed","Math","sqrt","abs","v","getRange","pos","range","isReal","isFinite","min","floor","max","ceil","type","barElement","_super","_this","e","delta","isHorizontal","deltaX","deltaY","preventDefault","trigger","thumbElement","querySelector","document","createElement","addClass","insertBefore","isAppend","gesto","Gesto","container","window","on","target","inputEvent","datas","isThumb","setTimeout","requestAnimationFrame","size","thumbRect","getBoundingClientRect","pos1","pos2","clientPos","scrollSize","scrollBy","stopPropagation","addEvent","onWheel","passive","__extends","ratio","this","isDisplay","display","_a","dirName1","sizeName","style","cssText","removeEvent","off","Component","containerElement","viewportElement","options","containerWidth","containerHeight","_b","viewportWidth","viewportHeight","scrollLeft","scrollTop","viewerScrollLeft","getScrollLeft","viewerScrollTop","getScrollTop","isLoop","scrollTo","ctrlKey","distance","scale","rotation","tempScale","isFlag","init","unset","verticalScrollbar","destroy","horizontalScrollbar","injectResult","resize","onScroll","onGestureStart","onGestureChange","isAbsolute","offsetY","getRangeY","offsetX","getRangeX","isZoom","left","top","x","y","minThreshold","maxThreshold","_c","_d","prevScrollLeft","prevScrollTop","_e","minX","maxX","_f","minY","maxY","scrollAreaWidth","getScrollAreaWidth","scrollAreaHeight","getScrollAreaHeight","zoomX","zoomY","round","render","nextX","nextY","move","requestScrollLeft","requestScrollTop","console","log","prevZoom","centerX","centerY","nextCenterX","nextCenterY","firstChild","ScrollBar","inject","nonce","body","events","stop","pauseAnimation","dragFlag","startEvent","isPinch","time","Date","now","prevSpeed","dt","measureSpeed","movement","isDrag","isDouble","startAnimation","startZoom","nextOffsetX","nextOffsetY","renderScroll","scrollWidth","getScrollWidth","scrollHeight","getScrollHeight","easing","duration","destPos","startTime","prevTime","next","pow","t","prevRatio","timer","cancelAnimationFrame","prototype","property","attributes","enumerable","configurable","get","setter","set","value","defineProperty","InfiniteViewer","modules"],"mappings":"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"}