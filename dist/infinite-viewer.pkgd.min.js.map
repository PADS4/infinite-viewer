{"version":3,"file":"infinite-viewer.pkgd.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/InfiniteViewer.tsx","../src/index.umd.ts"],"sourcesContent":["import styled from \"css-styled\";\nimport { InfiniteViewerOptions } from \"./types\";\n\nexport const injector = styled(`\n{\n    position: relative;\n    display: block;\n    overflow: auto;\n}\n:host::-webkit-scrollbar {\n    display: none;\n}\n`);\n\n/**\n * @memberof InfiniteViewer\n */\nexport const CLASS_NAME = injector.className;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const PROPERTIES = [\n    \"margin\",\n    \"threshold\",\n    \"zoom\",\n    \"rangeX\",\n    \"rangeY\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const OPTIONS = [\n    // ignore target, container,\n    ...PROPERTIES,\n    \"scrollArea\",\n] as const;\n\nexport const OPTION_TYPES: { [key in keyof InfiniteViewerOptions]: any } = {\n    margin: Number,\n    threshold: Number,\n    zoom: Number,\n    scrollArea: Object,\n    rangeX: Array,\n    rangeY: Array,\n};\n\n/**\n * @memberof InfiniteViewer\n */\nexport const EVENTS = [\n    \"scroll\",\n] as const;\n\n/**\n * @memberof InfiniteViewer\n */\nexport const METHODS = [\n    \"getScrollLeft\",\n    \"getScrollTop\",\n    \"getScrollWidth\",\n    \"getScrollHeight\",\n    \"scrollTo\",\n    \"scrollBy\",\n    \"scrollCenter\",\n] as const;\n","import { OnDrag } from \"@daybrush/drag\";\n\nexport function measureSpeed(e: OnDrag) {\n    const { deltaX, deltaY, datas } = e;\n    const time = Date.now();\n    const prevSpeed = datas.speed;\n\n    if (!prevSpeed) {\n        datas.speed = [0, 0];\n        datas.time = time;\n        return;\n    }\n    const dt = time - datas.time;\n    datas.speed = [prevSpeed[0] / 2 + deltaX / dt, prevSpeed[1] / 2 + deltaY / dt];\n}\n\nexport function getDuration(speed: number[], a: number) {\n    const normalSpeed = Math.sqrt(speed[0] * speed[0] + speed[1] * speed[1]);\n\n    return Math.abs(normalSpeed / a);\n}\nexport function getDestPos(speed: number[], a: number) {\n    const duration = getDuration(speed, a);\n\n    return [\n        speed[0] / 2 * duration,\n        speed[1] / 2 * duration,\n    ];\n}\nexport function minmax(value: number, min: number, max: number) {\n    return Math.min(max, Math.max(min, value));\n}\n","import Component from \"@egjs/component\";\nimport Dragger from \"@daybrush/drag\";\nimport { InjectResult } from \"css-styled\";\nimport { Properties } from \"framework-utils\";\nimport { camelize, IObject, addEvent, removeEvent, addClass } from \"@daybrush/utils\";\nimport { InfiniteViewerOptions, InfiniteViewerProperties, InfiniteViewerEvents } from \"./types\";\nimport { PROPERTIES, injector, CLASS_NAME } from \"./consts\";\nimport { measureSpeed, getDuration, getDestPos, minmax } from \"./utils\";\n\n@Properties(PROPERTIES as any, (prototype, property) => {\n    const attributes: IObject<any> = {\n        enumerable: true,\n        configurable: true,\n        get() {\n            return this.options[property];\n        },\n    };\n    const setter = camelize(`set ${property}`);\n    if (prototype[setter]) {\n        attributes.set = function(value) {\n            this[setter](value);\n        };\n    } else {\n        attributes.set = function(value) {\n            this.options[property] = value;\n        };\n    }\n    Object.defineProperty(prototype, property, attributes);\n})\nclass InfiniteViewer extends Component {\n    public options: InfiniteViewerOptions;\n    private injectResult!: InjectResult;\n    private scrollArea!: HTMLElement;\n    private dragger!: Dragger;\n    private loopX = 0;\n    private loopY = 0;\n    private offsetX = 0;\n    private offsetY = 0;\n    private scrollLeft = 0;\n    private scrollTop = 0;\n    private timer = 0;\n    /**\n     *\n     */\n    constructor(\n        private container: HTMLElement,\n        private viewport: HTMLElement,\n        options: Partial<InfiniteViewerOptions> = {},\n    ) {\n        super();\n        this.options = {\n            margin: 500,\n            threshold: 100,\n            zoom: 1,\n            rangeX: [-Infinity, Infinity],\n            rangeY: [-Infinity, Infinity],\n            scrollArea: null,\n            ...options,\n        };\n        this.scrollArea = this.options.scrollArea;\n        this.init();\n    }\n    /**\n     * Destroy elements, properties, and events.\n     */\n    public destroy(): void {\n        this.off();\n        this.dragger.unset();\n        this.injectResult.destroy();\n        removeEvent(this.container, \"scroll\", this.onScroll);\n\n        this.dragger = null;\n        this.injectResult = null;\n        this.container = null;\n        this.options = null;\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute top position\n     */\n    public getScrollTop(isAbsolute?: boolean) {\n        return this.scrollTop + (this.loopY - 1) * this.margin - this.offsetY\n            + (isAbsolute ? (-this.rangeY[0] + 1) * this.margin : 1);\n    }\n    /**\n     * Gets the number of pixels that an element's content is scrolled vertically.\n     * @param - Get absolute left position\n     */\n    public getScrollLeft(isAbsolute?: boolean) {\n        return this.scrollLeft + (this.loopX - 1) * this.margin - this.offsetX\n            + (isAbsolute ? (-this.rangeX[0] + 1) * this.margin : 0);\n    }\n    /**\n     * Gets measurement of the width of an element's content with overflow\n     */\n    public getScrollWidth() {\n        return this.container.offsetWidth + this.margin * (this.rangeX[1] - this.rangeX[0] + 2);\n    }\n    /**\n     * Gets measurement of the height of an element's content with overflow\n     */\n    public getScrollHeight() {\n        return this.container.offsetHeight + this.margin * (this.rangeY[1] - this.rangeY[0] + 2);\n    }\n\n    /**\n     * Scroll the element to the center\n     */\n    public scrollCenter() {\n        const {\n            offsetWidth: containerWidth,\n            offsetHeight: containerHeight,\n        } = this.container;\n        const {\n            offsetWidth: viewportWidth,\n            offsetHeight: viewportHeight,\n        } = this.viewport;\n        const zoom = this.zoom;\n        const left = -(containerWidth - viewportWidth * zoom) / 2;\n        const top = -(containerHeight - viewportHeight * zoom) / 2;\n\n        return this.scrollTo(left, top);\n    }\n    /**\n     * Scrolls the container by the given amount.\n     * @param deltaX\n     * @param deltaY\n     */\n    public scrollBy(deltaX: number, deltaY: number) {\n        return this.scrollTo(this.getScrollLeft() + deltaX, this.getScrollTop() + deltaY);\n    }\n    /**\n     * Scrolls the container to set of coordinates.\n     * @param scrollLeft\n     * @param scrollTop\n     */\n    public scrollTo(scrollLeft: number, scrollTop: number) {\n        const { rangeX, rangeY, margin } = this;\n        this.loopX = minmax(Math.floor((margin + scrollLeft) / margin), rangeX[0], rangeX[1]);\n        this.loopY = minmax(Math.floor((margin + scrollTop) / margin), rangeY[0], rangeY[1]);\n        this.offsetX = (this.loopX - 1) * margin - scrollLeft + this.scrollLeft;\n        this.offsetY = (this.loopY - 1) * margin - scrollTop + this.scrollTop;\n\n        this.render();\n        this.trigger(\"scroll\");\n        return this;\n    }\n    private init() {\n        // infinite-viewer(container)\n        // viewport\n        // children\n        const container = this.container;\n\n        addClass(container, CLASS_NAME);\n\n        // vanilla\n        if (!this.scrollArea) {\n            this.scrollArea = document.createElement(\"div\");\n\n            const scrollArea = this.scrollArea;\n\n            scrollArea.style.cssText += `position:absolute;top:0;left:0;`;\n            container.insertBefore(scrollArea, container.firstChild);\n        }\n        this.injectResult = injector.inject(container);\n\n        this.dragger = new Dragger(container, {\n            container: document.body,\n            events: [\"touch\"],\n            dragstart: ({ inputEvent }) => {\n                inputEvent.preventDefault();\n                this.pauseAnimation();\n            },\n            drag: e => {\n                measureSpeed(e);\n                this.scrollBy(-e.deltaX, -e.deltaY);\n            },\n            dragend: e => {\n                this.startAnimation(e.datas.speed);\n            },\n        });\n        const margin = this.margin;\n\n        addEvent(container, \"scroll\", this.onScroll);\n        this.render();\n        this.move(margin, margin);\n    }\n    private render() {\n        const {\n            margin,\n            loopX,\n            loopY,\n            offsetX,\n            offsetY,\n            zoom,\n        } = this;\n        const size = `calc(100% + ${margin * 2}px)`;\n        const nextOffsetX = (1 - loopX) * margin + offsetX;\n        const nextOffsetY = (1 - loopY) * margin + offsetY;\n\n        this.scrollArea.style.cssText += `width:${size};height:${size};`;\n        this.viewport.style.transform = `translate(${nextOffsetX}px, ${nextOffsetY}px) scale(${zoom})`;\n    }\n    private move(scrollLeft: number, scrollTop: number) {\n        const container = this.container;\n\n        container.scrollLeft = scrollLeft;\n        container.scrollTop = scrollTop;\n    }\n    private onScroll = () => {\n        const container = this.container;\n        const { scrollLeft, scrollTop } = container;\n        const {\n            margin,\n            threshold,\n            loopX,\n            loopY,\n            rangeX,\n            rangeY,\n        } = this;\n        const endThreshold = margin * 2 - threshold;\n        let nextLoopX = loopX;\n        let nextLoopY = loopY;\n\n        let nextScrollLeft = scrollLeft;\n        let nextScrollTop = scrollTop;\n\n        if (scrollLeft < threshold) {\n            if (nextLoopX > rangeX[0]) {\n                nextScrollLeft = scrollLeft + margin;\n                --nextLoopX;\n            }\n        } else if (scrollLeft > endThreshold) {\n            if (nextLoopX < rangeX[1]) {\n                nextScrollLeft = scrollLeft - margin;\n                ++nextLoopX;\n            }\n        }\n        if (scrollTop < threshold) {\n            if (nextLoopY > rangeY[0]) {\n                nextScrollTop = scrollTop + margin;\n                --nextLoopY;\n            }\n        } else if (scrollTop > endThreshold) {\n            if (nextLoopY < rangeY[1]) {\n                nextScrollTop = scrollTop - margin;\n                ++nextLoopY;\n            }\n        }\n        const isChangeScroll = this.scrollLeft !== nextScrollLeft || this.scrollTop !== nextScrollTop;\n        const isChangeLoop = loopX !== nextLoopX || loopY !== nextLoopY;\n\n        this.scrollLeft = nextScrollLeft;\n        this.scrollTop = nextScrollTop;\n        this.loopX = nextLoopX;\n        this.loopY = nextLoopY;\n\n        this.render();\n\n        if (isChangeLoop || isChangeScroll) {\n            this.trigger(\"scroll\");\n        }\n\n        if (isChangeScroll) {\n            this.move(nextScrollLeft, nextScrollTop);\n        }\n    }\n    private startAnimation(speed: number[]) {\n        if (!speed || (!speed[0] && !speed[1])) {\n            return;\n        }\n        const a = -0.0006;\n        const easing = x => 1 - Math.pow(1 - x, 3);\n        const duration = getDuration(speed, a);\n        const destPos = getDestPos(speed, a);\n        const startTime = Date.now();\n        let prevTime = startTime;\n\n        const next = () => {\n            const now = Date.now();\n            let t = now - startTime;\n\n            if (duration < t) {\n                t = duration;\n            }\n            const ratio = easing(t / duration);\n            const prevRatio = easing((prevTime - startTime) / duration);\n\n            prevTime = now;\n\n            this.scrollBy(\n                -destPos[0] * (ratio - prevRatio),\n                -destPos[1] * (ratio - prevRatio),\n            );\n\n            if (t >= duration) {\n                return;\n            }\n            this.timer = requestAnimationFrame(next);\n        };\n        this.timer = requestAnimationFrame(next);\n    }\n    private pauseAnimation() {\n        cancelAnimationFrame(this.timer);\n    }\n}\n\ninterface InfiniteViewer extends Component, InfiniteViewerProperties {\n    // tslint:disable-next-line: max-line-length\n    on<T extends keyof InfiniteViewerEvents>(eventName: T, handlerToAttach: (event: InfiniteViewerEvents[T]) => any): this;\n    on(eventName: string, handlerToAttach: (event: { [key: string]: any }) => any): this;\n    on(events: { [key: string]: (event: { [key: string]: any }) => any }): this;\n}\n\nexport default InfiniteViewer;\n","import InfiniteViewer, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (InfiniteViewer as any)[name] = modules[name];\n}\n\nexport default InfiniteViewer;\n"],"names":["injector","CLASS_NAME","className","PROPERTIES","OPTIONS","__spreadArrays","OPTION_TYPES","margin","Number","threshold","zoom","scrollArea","Object","rangeX","Array","rangeY","getDuration","speed","a","normalSpeed","Math","sqrt","abs","minmax","value","min","max","container","viewport","options","_super","_this","scrollLeft","scrollTop","loopX","loopY","endThreshold","nextLoopX","nextLoopY","nextScrollLeft","nextScrollTop","isChangeScroll","isChangeLoop","render","trigger","move","Infinity","init","off","dragger","unset","injectResult","destroy","removeEvent","this","onScroll","isAbsolute","offsetY","offsetX","offsetWidth","offsetHeight","_a","containerWidth","containerHeight","_b","viewportWidth","viewportHeight","left","top","scrollTo","deltaX","deltaY","getScrollLeft","getScrollTop","floor","document","createElement","style","cssText","insertBefore","firstChild","inject","Dragger","body","events","dragstart","preventDefault","pauseAnimation","drag","e","datas","time","Date","now","prevSpeed","dt","measureSpeed","scrollBy","dragend","startAnimation","addEvent","size","nextOffsetX","nextOffsetY","transform","duration","easing","x","pow","destPos","startTime","prevTime","next","t","ratio","prevRatio","timer","requestAnimationFrame","cancelAnimationFrame","InfiniteViewer","prototype","property","attributes","enumerable","configurable","get","setter","set","defineProperty","Component","name","modules"],"mappings":";;;;;;;;q/OAGO,YAAMA,6FAAkB,kbAclBC,EAAaD,EAASE,UAKtBC,EAAa,CACtB,SACA,YACA,OACA,SACA,UAMSC,uLAAUC,CAEhBF,GACH,eAGSG,EAA8D,CACvEC,OAAQC,OACRC,UAAWD,OACXE,KAAMF,OACNG,WAAYC,OACZC,OAAQC,MACRC,OAAQD,gBC7BIE,EAAYC,EAAiBC,OACnCC,EAAcC,KAAKC,KAAKJ,EAAM,GAAKA,EAAM,GAAKA,EAAM,GAAKA,EAAM,WAE9DG,KAAKE,IAAIH,EAAcD,YAUlBK,EAAOC,EAAeC,EAAaC,UACxCN,KAAKK,IAAIC,EAAKN,KAAKM,IAAID,EAAKD,ICDvC,qEAgBgBG,EACAC,EACRC,gBAAAA,YAEAC,0BAJQC,YAAAJ,EACAI,WAAAH,EAZJG,QAAQ,EACRA,QAAQ,EACRA,UAAU,EACVA,UAAU,EACVA,aAAa,EACbA,YAAY,EACZA,QAAQ,EAyKRA,WAAW,eACTJ,EAAYI,EAAKJ,UACfK,eAAYC,cAEhB1B,WACAE,cACAyB,UACAC,UACAtB,WACAE,WAEEqB,EAAwB,EAAT7B,EAAaE,EAC9B4B,EAAYH,EACZI,EAAYH,EAEZI,EAAiBP,EACjBQ,EAAgBP,EAEhBD,EAAavB,EACT4B,EAAYxB,EAAO,KACnB0B,EAAiBP,EAAazB,IAC5B8B,GAEcD,EAAbJ,GACHK,EAAYxB,EAAO,KACnB0B,EAAiBP,EAAazB,IAC5B8B,GAGNJ,EAAYxB,EACR6B,EAAYvB,EAAO,KACnByB,EAAgBP,EAAY1B,IAC1B+B,GAEaF,EAAZH,GACHK,EAAYvB,EAAO,KACnByB,EAAgBP,EAAY1B,IAC1B+B,OAGJG,EAAiBV,EAAKC,aAAeO,GAAkBR,EAAKE,YAAcO,EAC1EE,EAAeR,IAAUG,GAAaF,IAAUG,EAEtDP,EAAKC,WAAaO,EAClBR,EAAKE,UAAYO,EACjBT,EAAKG,MAAQG,EACbN,EAAKI,MAAQG,EAEbP,EAAKY,UAEDD,GAAgBD,IAChBV,EAAKa,QAAQ,UAGbH,GACAV,EAAKc,KAAKN,EAAgBC,IAtN9BT,EAAKF,WACDtB,OAAQ,IACRE,UAAW,IACXC,KAAM,EACNG,OAAQ,EAAEiC,EAAAA,EAAUA,EAAAA,GACpB/B,OAAQ,EAAE+B,EAAAA,EAAUA,EAAAA,GACpBnC,WAAY,MACTkB,GAEPE,EAAKpB,WAAaoB,EAAKF,QAAQlB,WAC/BoB,EAAKgB,iIAKT,gBACSC,WACAC,QAAQC,aACRC,aAAaC,UAClBC,EAAYC,KAAK3B,UAAW,SAAU2B,KAAKC,eAEtCN,QAAU,UACVE,aAAe,UACfxB,UAAY,UACZE,QAAU,qBAMnB,SAAoB2B,UACTF,KAAKrB,WAAaqB,KAAKnB,MAAQ,GAAKmB,KAAK/C,OAAS+C,KAAKG,SACvDD,GAAgC,EAAjBF,KAAKvC,OAAO,IAAUuC,KAAK/C,OAAS,oBAM9D,SAAqBiD,UACVF,KAAKtB,YAAcsB,KAAKpB,MAAQ,GAAKoB,KAAK/C,OAAS+C,KAAKI,SACxDF,GAAgC,EAAjBF,KAAKzC,OAAO,IAAUyC,KAAK/C,OAAS,qBAK9D,kBACW+C,KAAK3B,UAAUgC,YAAcL,KAAK/C,QAAU+C,KAAKzC,OAAO,GAAKyC,KAAKzC,OAAO,GAAK,sBAKzF,kBACWyC,KAAK3B,UAAUiC,aAAeN,KAAK/C,QAAU+C,KAAKvC,OAAO,GAAKuC,KAAKvC,OAAO,GAAK,mBAM1F,eACU8C,iBACFC,gBACAC,iBAEEC,gBACFC,gBACAC,iBAEExD,EAAO4C,KAAK5C,KACZyD,IAASL,EAAiBG,EAAgBvD,GAAQ,EAClD0D,IAAQL,EAAkBG,EAAiBxD,GAAQ,SAElD4C,KAAKe,SAASF,EAAMC,eAO/B,SAAgBE,EAAgBC,UACrBjB,KAAKe,SAASf,KAAKkB,gBAAkBF,EAAQhB,KAAKmB,eAAiBF,eAO9E,SAAgBvC,EAAoBC,OACxBpB,cAAQE,cAAQR,0BACnB2B,MAAQX,EAAOH,KAAKsD,OAAOnE,EAASyB,GAAczB,GAASM,EAAO,GAAIA,EAAO,SAC7EsB,MAAQZ,EAAOH,KAAKsD,OAAOnE,EAAS0B,GAAa1B,GAASQ,EAAO,GAAIA,EAAO,SAC5E2C,SAAWJ,KAAKpB,MAAQ,GAAK3B,EAASyB,EAAasB,KAAKtB,gBACxDyB,SAAWH,KAAKnB,MAAQ,GAAK5B,EAAS0B,EAAYqB,KAAKrB,eAEvDU,cACAC,QAAQ,UACNU,aAEX,0BAIU3B,EAAY2B,KAAK3B,eAEH1B,KAAX0B,oDAGJ2B,KAAK3C,WAAY,MACbA,WAAagE,SAASC,cAAc,WAEnCjE,EAAa2C,KAAK3C,WAExBA,EAAWkE,MAAMC,SAAW,kCAC5BnD,EAAUoD,aAAapE,EAAYgB,EAAUqD,iBAE5C7B,aAAenD,EAASiF,OAAOtD,QAE/BsB,QAAU,IAAIiC,EAAQvD,EAAW,CAClCA,UAAWgD,SAASQ,KACpBC,OAAQ,CAAC,SACTC,UAAW,SAACxB,gBACGyB,iBACXvD,EAAKwD,kBAETC,KAAM,SAAAC,aD3KWA,OACjBnB,WAAQC,WAAQmB,UAClBC,EAAOC,KAAKC,MACZC,EAAYJ,EAAMzE,UAEnB6E,SACDJ,EAAMzE,MAAQ,CAAC,EAAG,GAClByE,EAAMC,KAAOA,MAGXI,EAAKJ,EAAOD,EAAMC,KACxBD,EAAMzE,MAAQ,CAAC6E,EAAU,GAAK,EAAIxB,EAASyB,EAAID,EAAU,GAAK,EAAIvB,EAASwB,GCiK/DC,CAAaP,GACb1D,EAAKkE,UAAUR,EAAEnB,QAASmB,EAAElB,SAEhC2B,QAAS,SAAAT,GACL1D,EAAKoE,eAAeV,EAAEC,MAAMzE,cAG9BV,EAAS+C,KAAK/C,OAEpB6F,EAASzE,EAAW,SAAU2B,KAAKC,eAC9BZ,cACAE,KAAKtC,EAAQA,aAEtB,eACUsD,OACFtD,WACA2B,UACAC,UACAuB,YACAD,YACA/C,SAEE2F,EAAO,eAAwB,EAAT9F,QACtB+F,GAAe,EAAIpE,GAAS3B,EAASmD,EACrC6C,GAAe,EAAIpE,GAAS5B,EAASkD,OAEtC9C,WAAWkE,MAAMC,SAAW,SAASuB,aAAeA,WACpDzE,SAASiD,MAAM2B,UAAY,aAAaF,SAAkBC,eAAwB7F,cAE3F,SAAasB,EAAoBC,OACvBN,EAAY2B,KAAK3B,UAEvBA,EAAUK,WAAaA,EACvBL,EAAUM,UAAYA,oBA4D1B,SAAuBhB,iBACdA,IAAWA,EAAM,IAAOA,EAAM,SDvPhBA,EACjBwF,EC0PIC,EAAS,SAAAC,UAAK,EAAIvF,KAAKwF,IAAI,EAAID,EAAG,IAClCF,EAAWzF,EAAYC,GAFnB,MAGJ4F,GD5PJJ,EAAWzF,EADMC,EC6PQA,GAHjB,MDvPP,CACHA,EAAM,GAAK,EAAIwF,EACfxF,EAAM,GAAK,EAAIwF,ICyPTK,EAAYlB,KAAKC,MACnBkB,EAAWD,EAETE,EAAO,eACHnB,EAAMD,KAAKC,MACboB,EAAIpB,EAAMiB,EAEVL,EAAWQ,IACXA,EAAIR,OAEFS,EAAQR,EAAOO,EAAIR,GACnBU,EAAYT,GAAQK,EAAWD,GAAaL,GAElDM,EAAWlB,EAEX9D,EAAKkE,UACAY,EAAQ,IAAMK,EAAQC,IACtBN,EAAQ,IAAMK,EAAQC,IAGlBV,GAALQ,IAGJlF,EAAKqF,MAAQC,sBAAsBL,UAElCI,MAAQC,sBAAsBL,sBAEvC,WACIM,qBAAqBhE,KAAK8D,QAlR5BG,0UApBMpH,IAAmB,SAACqH,EAAWC,OACjCC,EAA2B,CAC7BC,YAAY,EACZC,cAAc,EACdC,sBACWvE,KAAKzB,QAAQ4F,KAGtBK,GAAkB,OAAOL,mEAC3BD,EAAUM,GACVJ,EAAWK,IAAM,SAASvG,QACjBsG,GAAQtG,IAGjBkG,EAAWK,IAAM,SAASvG,QACjBK,QAAQ4F,GAAYjG,GAGjCZ,OAAOoH,eAAeR,EAAWC,EAAUC,oEAEzCH,IAAuBU,4EFsBP,CAClB,kBAMmB,CACnB,gBACA,eACA,iBACA,kBACA,WACA,WACA,8BG/DJ,IAAK,IAAMC,KAAQC,EACdZ,EAAuBW,GAAQC,EAAQD"}